name: Release pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"

      - name: Get last tag
        id: get_last_tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
          echo "Latest tag found: $LAST_TAG"

      - name: Extract branch from commit message
        id: extract_branch
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" =~ "Merge pull request" ]]; then
            ORIGIN_BRANCH=$(echo "$COMMIT_MSG" | grep -oE 'from [^ ]+' | awk '{print $2}')
          else
            ORIGIN_BRANCH="none"
            echo "Es un push directo a main, skipping release"
            exit 1
          fi

          echo "Branch: $ORIGIN_BRANCH"
          echo "ORIGIN_BRANCH=$ORIGIN_BRANCH" >> $GITHUB_ENV

      - name: Check if release or hotfix
        id: check_type
        run: |
          if [[ "${{ env.ORIGIN_BRANCH }}" =~ "release\/v([0-9]+\.[0-9]+\.[0-9]+)$" ]]; then
            echo "TYPE=release" >> $GITHUB_ENV
            echo "VERSION="${BASH_REMATCH[1]}"" >> $GITHUB_ENV
            echo "Detected release, using the version $VERSION"
          elif [[ "${{ env.ORIGIN_BRANCH }}" =~ "hotfix\/" ]]; then
            echo "TYPE=hotfix" >> $GITHUB_ENV
            IFS='.' read -r MAJOR MINOR PATCH <<< "${{ env.LAST_TAG }}"
            PATCH=$((PATCH + 1))
            echo "VERSION=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_ENV
            echo "Its a hotfix, new release version is $VERSION"
          else
            echo "TYPE=none" >> $GITHUB_ENV
            echo "VERSION=none" >> $GITHUB_ENV
            echo "Not a clear version on the release, nor a hotfix, skipping"
            exit 1
          fi

      - name: Determine version to release
        id: determine_version
        run: |
          if [[ "${{ env.TYPE }}" == "hotfix" ]]; then
            # Hotfix: Bump patch
            IFS='.' read -r MAJOR MINOR PATCH <<< "${{ env.VERSION }}"
            PATCH=$((PATCH + 1))
            echo "FINAL_VERSION=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_ENV
            echo "Hotfix merged, bumped patch version to: $FINAL_VERSION"
          elif [[ "${{ env.TYPE }}" == "release" ]]; then
            # Release normal
            echo "FINAL_VERSION=${{ env.VERSION }}" >> $GITHUB_ENV
            echo "Merged release into main. The release version is $FINAL_VERSION"
          else
            echo "Could not determine new version, skipping..."
            exit 1
          fi

      - name: Push new tag
        run: |
          git tag v${{ env.FINAL_VERSION }}
          git push origin v${{ env.FINAL_VERSION }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.FINAL_VERSION }}
          name: Release v${{ env.FINAL_VERSION }}
          generate_release_notes: true
